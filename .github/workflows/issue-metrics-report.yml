name: Generate Issue Metrics Report

on:
  schedule:
    - cron: '0 13 * * 1' # Every Monday at 8am EST (13:00 UTC)
  workflow_dispatch:

jobs:
  issue-metrics-report:
    runs-on: ubuntu-latest
    steps:
      - name: Generate issue metrics
        uses: actions/github-script@v7
        id: metrics
        with:
          script: |
            function daysBetween(date1, date2) {
              return (new Date(date2) - new Date(date1)) / (1000 * 60 * 60 * 24);
            }
            const { data: allIssues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              per_page: 100
            });
            let open = 0, closed = 0, closureTimes = [];
            let assigneeStats = {};
            for (const issue of allIssues) {
              if (issue.pull_request) continue;
              const assignee = issue.assignee ? issue.assignee.login : 'Unassigned';
              if (!assigneeStats[assignee]) {
                assigneeStats[assignee] = { open: 0, closed: 0, closureTimes: [] };
              }
              if (issue.state === 'open') {
                open++;
                assigneeStats[assignee].open++;
              }
              if (issue.state === 'closed') {
                closed++;
                assigneeStats[assignee].closed++;
                if (issue.closed_at && issue.created_at) {
                  const days = daysBetween(issue.created_at, issue.closed_at);
                  closureTimes.push(days);
                  assigneeStats[assignee].closureTimes.push(days);
                }
              }
            }
            const total = open + closed;
            const closurePct = total ? ((closed / total) * 100).toFixed(2) : '0.00';
            const avgClosure = closureTimes.length ? (closureTimes.reduce((a, b) => a + b, 0) / closureTimes.length).toFixed(2) : 'N/A';
            let report = [
              `# Issue Metrics Report`,
              `\n**Open Issues:** ${open}`,
              `\n**Closed Issues:** ${closed}`,
              `\n**Closure Percentage:** ${closurePct}%`,
              `\n**Average Time Until Closed:** ${avgClosure} days`,
              `\n_Total issues analyzed: ${total}_` 
            ];
            report.push('\n---\n## Per-Assignee Metrics');
            for (const [assignee, stats] of Object.entries(assigneeStats)) {
              const totalA = stats.open + stats.closed;
              const closurePctA = totalA ? ((stats.closed / totalA) * 100).toFixed(2) : '0.00';
              const avgClosureA = stats.closureTimes.length ? (stats.closureTimes.reduce((a, b) => a + b, 0) / stats.closureTimes.length).toFixed(2) : 'N/A';
              report.push(`\n### ${assignee}`);
              report.push(`- Open: ${stats.open}`);
              report.push(`- Closed: ${stats.closed}`);
              report.push(`- Closure %: ${closurePctA}%`);
              report.push(`- Avg. Time Until Closed: ${avgClosureA} days`);
            }
            core.setOutput('report', report.join('\n'));

      - name: Post metrics report as issue comment
        uses: actions/github-script@v7
        with:
          script: |
            const report = `\n${{ steps.metrics.outputs.report }}`;
            // Post to a dedicated issue or create one if not exists
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              per_page: 100
            });
            let reportIssue = issues.find(i => i.title === 'ðŸ“Š Weekly Issue Metrics Report');
            if (!reportIssue) {
              const { data: newIssue } = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'ðŸ“Š Weekly Issue Metrics Report',
                body: 'This issue will be updated weekly with repository issue metrics.'
              });
              reportIssue = newIssue;
            }
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: reportIssue.number,
              body: report
            });
